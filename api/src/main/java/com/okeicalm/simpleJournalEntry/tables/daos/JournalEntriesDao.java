/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.tables.daos;


import com.okeicalm.simpleJournalEntry.tables.JournalEntries;
import com.okeicalm.simpleJournalEntry.tables.records.JournalEntriesRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class JournalEntriesDao extends DAOImpl<JournalEntriesRecord, com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries, Long> {

    /**
     * Create a new JournalEntriesDao without any configuration
     */
    public JournalEntriesDao() {
        super(JournalEntries.JOURNAL_ENTRIES, com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries.class);
    }

    /**
     * Create a new JournalEntriesDao with an attached configuration
     */
    @Autowired
    public JournalEntriesDao(Configuration configuration) {
        super(JournalEntries.JOURNAL_ENTRIES, com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries.class, configuration);
    }

    @Override
    public Long getId(com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JournalEntries.JOURNAL_ENTRIES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchById(Long... values) {
        return fetch(JournalEntries.JOURNAL_ENTRIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries fetchOneById(Long value) {
        return fetchOne(JournalEntries.JOURNAL_ENTRIES.ID, value);
    }

    /**
     * Fetch records that have <code>journal_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchRangeOfJournalId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JournalEntries.JOURNAL_ENTRIES.JOURNAL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_id IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchByJournalId(Long... values) {
        return fetch(JournalEntries.JOURNAL_ENTRIES.JOURNAL_ID, values);
    }

    /**
     * Fetch records that have <code>side BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchRangeOfSide(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(JournalEntries.JOURNAL_ENTRIES.SIDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>side IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchBySide(Byte... values) {
        return fetch(JournalEntries.JOURNAL_ENTRIES.SIDE, values);
    }

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchRangeOfAccountId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JournalEntries.JOURNAL_ENTRIES.ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchByAccountId(Long... values) {
        return fetch(JournalEntries.JOURNAL_ENTRIES.ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchRangeOfValue(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JournalEntries.JOURNAL_ENTRIES.VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.JournalEntries> fetchByValue(Integer... values) {
        return fetch(JournalEntries.JOURNAL_ENTRIES.VALUE, values);
    }
}
