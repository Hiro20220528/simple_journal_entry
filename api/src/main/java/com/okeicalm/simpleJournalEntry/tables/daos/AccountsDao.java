/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.tables.daos;


import com.okeicalm.simpleJournalEntry.tables.Accounts;
import com.okeicalm.simpleJournalEntry.tables.records.AccountsRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AccountsDao extends DAOImpl<AccountsRecord, com.okeicalm.simpleJournalEntry.tables.pojos.Accounts, Long> {

    /**
     * Create a new AccountsDao without any configuration
     */
    public AccountsDao() {
        super(Accounts.ACCOUNTS, com.okeicalm.simpleJournalEntry.tables.pojos.Accounts.class);
    }

    /**
     * Create a new AccountsDao with an attached configuration
     */
    @Autowired
    public AccountsDao(Configuration configuration) {
        super(Accounts.ACCOUNTS, com.okeicalm.simpleJournalEntry.tables.pojos.Accounts.class, configuration);
    }

    @Override
    public Long getId(com.okeicalm.simpleJournalEntry.tables.pojos.Accounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchById(Long... values) {
        return fetch(Accounts.ACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.okeicalm.simpleJournalEntry.tables.pojos.Accounts fetchOneById(Long value) {
        return fetchOne(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchByCode(String... values) {
        return fetch(Accounts.ACCOUNTS.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public com.okeicalm.simpleJournalEntry.tables.pojos.Accounts fetchOneByCode(String value) {
        return fetchOne(Accounts.ACCOUNTS.CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchByName(String... values) {
        return fetch(Accounts.ACCOUNTS.NAME, values);
    }

    /**
     * Fetch records that have <code>element_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchRangeOfElementType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ELEMENT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>element_type IN (values)</code>
     */
    public List<com.okeicalm.simpleJournalEntry.tables.pojos.Accounts> fetchByElementType(Integer... values) {
        return fetch(Accounts.ACCOUNTS.ELEMENT_TYPE, values);
    }
}
