/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.tables.records;


import com.okeicalm.simpleJournalEntry.tables.Journals;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalsRecord extends UpdatableRecordImpl<JournalsRecord> implements Record2<Long, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>simple_journal_entry_db.journals.id</code>.
     */
    public JournalsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>simple_journal_entry_db.journals.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>simple_journal_entry_db.journals.incurred_on</code>.
     */
    public JournalsRecord setIncurredOn(LocalDate value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>simple_journal_entry_db.journals.incurred_on</code>.
     */
    public LocalDate getIncurredOn() {
        return (LocalDate) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, LocalDate> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, LocalDate> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Journals.JOURNALS.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Journals.JOURNALS.INCURRED_ON;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getIncurredOn();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getIncurredOn();
    }

    @Override
    public JournalsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public JournalsRecord value2(LocalDate value) {
        setIncurredOn(value);
        return this;
    }

    @Override
    public JournalsRecord values(Long value1, LocalDate value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JournalsRecord
     */
    public JournalsRecord() {
        super(Journals.JOURNALS);
    }

    /**
     * Create a detached, initialised JournalsRecord
     */
    public JournalsRecord(Long id, LocalDate incurredOn) {
        super(Journals.JOURNALS);

        setId(id);
        setIncurredOn(incurredOn);
    }

    /**
     * Create a detached, initialised JournalsRecord
     */
    public JournalsRecord(com.okeicalm.simpleJournalEntry.tables.pojos.Journals value) {
        super(Journals.JOURNALS);

        if (value != null) {
            setId(value.getId());
            setIncurredOn(value.getIncurredOn());
        }
    }
}
