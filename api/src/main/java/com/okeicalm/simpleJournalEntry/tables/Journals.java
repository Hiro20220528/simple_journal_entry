/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.tables;


import com.okeicalm.simpleJournalEntry.Keys;
import com.okeicalm.simpleJournalEntry.SimpleJournalEntryDb;
import com.okeicalm.simpleJournalEntry.tables.records.JournalsRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Journals extends TableImpl<JournalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>simple_journal_entry_db.journals</code>
     */
    public static final Journals JOURNALS = new Journals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalsRecord> getRecordType() {
        return JournalsRecord.class;
    }

    /**
     * The column <code>simple_journal_entry_db.journals.id</code>.
     */
    public final TableField<JournalsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>simple_journal_entry_db.journals.incurred_on</code>.
     */
    public final TableField<JournalsRecord, LocalDate> INCURRED_ON = createField(DSL.name("incurred_on"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Journals(Name alias, Table<JournalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Journals(Name alias, Table<JournalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>simple_journal_entry_db.journals</code> table
     * reference
     */
    public Journals(String alias) {
        this(DSL.name(alias), JOURNALS);
    }

    /**
     * Create an aliased <code>simple_journal_entry_db.journals</code> table
     * reference
     */
    public Journals(Name alias) {
        this(alias, JOURNALS);
    }

    /**
     * Create a <code>simple_journal_entry_db.journals</code> table reference
     */
    public Journals() {
        this(DSL.name("journals"), null);
    }

    public <O extends Record> Journals(Table<O> child, ForeignKey<O, JournalsRecord> key) {
        super(child, key, JOURNALS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB;
    }

    @Override
    public Identity<JournalsRecord, Long> getIdentity() {
        return (Identity<JournalsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JournalsRecord> getPrimaryKey() {
        return Keys.KEY_JOURNALS_PRIMARY;
    }

    @Override
    public Journals as(String alias) {
        return new Journals(DSL.name(alias), this);
    }

    @Override
    public Journals as(Name alias) {
        return new Journals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Journals rename(String name) {
        return new Journals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Journals rename(Name name) {
        return new Journals(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, LocalDate> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
